def answer_zero():
    return len(cancer['feature_names'])




def answer_one():
    df = pd.DataFrame(data=cancer.data, columns=cancer.feature_names)    
    return df




def answer_two():
    cancerdf = answer_one()    
    total_Number = len(cancer.target)
    ones_number = np.count_nonzero(cancer.target)
    Zeros_number = total_Number-ones_number
    target = { "malignant":Zeros_number,
              "benign":ones_number
    }
    target= pd.Series(target)    
    return target


def answer_three():
    cancerdf = answer_one()
    X = cancerdf[['mean radius', 'mean texture', 'mean perimeter', 'mean area', 'mean smoothness', 'mean compactness', 'mean concavity', 'mean concave points', 'mean symmetry', 'mean fractal dimension', 'radius error', 'texture error', 'perimeter error', 'area error', 'smoothness error', 'compactness error', 'concavity error', 'concave points error', 'symmetry error', 'fractal dimension error', 'worst radius', 'worst texture', 'worst perimeter', 'worst area', 'worst smoothness', 'worst compactness', 'worst concavity', 'worst concave points', 'worst symmetry', 'worst fractal dimension']]
    y = pd.Series(cancer.target)
    return X, y







from sklearn.model_selection import train_test_split
def answer_four():
    X, y = answer_three()
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)
    #print(y_train.shape)
    return X_train, X_test, y_train, y_test






from sklearn.neighbors import KNeighborsClassifier
def answer_five():
    X_train, X_test, y_train, y_test = answer_four()
    knn = KNeighborsClassifier(n_neighbors = 1)
    # Your code here
    knn.fit(X_train, y_train)
    return knn




def answer_six():
    cancerdf = answer_one()
    means = cancerdf.mean()[:-1].values.reshape(1, -1)
    knn=answer_five()
    means=np.append(means, 0.0)#I tried to handl missing value by adding 0
    return knn.predict(means)
answer_six()





def answer_seven():
    X_train, X_test, y_train, y_test = answer_four()
    knn = answer_five()
    return knn.predict(X_test)




def answer_eight():
    X_train, X_test, y_train, y_test = answer_four()
    knn = answer_five()
    return knn.score(X_test, y_test)
answer_eight()